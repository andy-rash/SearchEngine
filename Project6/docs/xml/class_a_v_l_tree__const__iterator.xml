<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="class_a_v_l_tree__const__iterator" kind="class" language="C++" prot="public">
    <compoundname>AVLTree_const_iterator</compoundname>
    <includes refid="_a_v_l_tree_8hpp" local="no">AVLTree.hpp</includes>
    <templateparamlist>
      <param>
        <type>class _Type</type>
      </param>
      <param>
        <type>class _NodePtr</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_a_v_l_tree__const__iterator_1aa2d12330a9ba748729e42d8fc882c98e" prot="public" static="no">
        <type>std::forward_iterator_tag</type>
        <definition>typedef std::forward_iterator_tag AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="405" column="1" bodyfile="AVLTree.hpp" bodystart="405" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__const__iterator_1abff96c9a253b234068c5d34f7471751d" prot="public" static="no">
        <type>std::pointer_traits&lt; _node_pointer &gt;::element_type::value_type</type>
        <definition>typedef std::pointer_traits&lt;_node_pointer&gt;::element_type::value_type AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="406" column="1" bodyfile="AVLTree.hpp" bodystart="406" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__const__iterator_1a60f81dd86cc602fcc95a298df957990b" prot="public" static="no">
        <type><ref refid="class_a_v_l_tree__const__iterator_1abff96c9a253b234068c5d34f7471751d" kindref="member">value_type</ref> &amp;</type>
        <definition>typedef value_type&amp; AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="407" column="1" bodyfile="AVLTree.hpp" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__const__iterator_1a0fbfdccc80380ae68a44281dcc18e770" prot="public" static="no">
        <type><ref refid="class_a_v_l_tree__const__iterator_1abff96c9a253b234068c5d34f7471751d" kindref="member">value_type</ref> *</type>
        <definition>typedef value_type* AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="408" column="1" bodyfile="AVLTree.hpp" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__const__iterator_1a4373b7d2f957d78030ee9dbd86fc307e" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>typedef std::ptrdiff_t AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="409" column="1" bodyfile="AVLTree.hpp" bodystart="409" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_a_v_l_tree__const__iterator_1ad8477a42408fd130992d2cfcb42dcb5d" prot="public" static="no" mutable="no">
        <type>_node_pointer</type>
        <definition>_node_pointer AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::_ptr</definition>
        <argsstring></argsstring>
        <name>_ptr</name>
        <briefdescription>
<para>A pointer to the nodes in the AVL tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="387" column="1" bodyfile="AVLTree.hpp" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_a_v_l_tree__const__iterator_1ad7a12b75802e659f5991bcf31cbf8acb" prot="public" static="no" mutable="no">
        <type>_AVLTree</type>
        <definition>_AVLTree AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::_ref</definition>
        <argsstring></argsstring>
        <name>_ref</name>
        <briefdescription>
<para>A reference AVL tree pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="388" column="1" bodyfile="AVLTree.hpp" bodystart="388" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_a_v_l_tree__const__iterator_1aa926bd8d1e26ee32ade14a311ebf8df5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class AVLTree</definition>
        <argsstring></argsstring>
        <name>AVLTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="400" column="1" bodyfile="AVLTree.hpp" bodystart="400" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_a_v_l_tree__const__iterator_1a3b97d3835e767e85b1cededfeefa9d84" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class AVLTree_iterator</definition>
        <argsstring></argsstring>
        <name>AVLTree_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="401" column="1" bodyfile="AVLTree.hpp" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_a_v_l_tree__const__iterator_1aa8f8a38cc48dccdbf336f2e44dbf084c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::operator==</definition>
        <argsstring>(const AVLTree_const_iterator &amp;lhs, const AVLTree_const_iterator &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- first operand to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- second operand to be compared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean value whether the iterators are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="550" column="1" bodyfile="AVLTree.hpp" bodystart="550" bodyend="551"/>
      </memberdef>
      <memberdef kind="friend" id="class_a_v_l_tree__const__iterator_1affd846c45384c4c538ae133d9723ffa4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::operator!=</definition>
        <argsstring>(const AVLTree_const_iterator &amp;lhs, const AVLTree_const_iterator &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- first operand to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- second operand to be compared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean value whether the iterators are not equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="562" column="1" bodyfile="AVLTree.hpp" bodystart="562" bodyend="563"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1a78ce8eb277b5289da1b8509813cbc2a0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::AVLTree_const_iterator</definition>
        <argsstring>(_node_pointer ptr, _AVLTree tree)</argsstring>
        <name>AVLTree_const_iterator</name>
        <param>
          <type>_node_pointer</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>_AVLTree</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Initializes the member data with given values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>- node pointer for the iterator to be initialized with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>- a tree for the node to point to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="397" column="1" bodyfile="AVLTree.hpp" bodystart="397" bodyend="398"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1aebe2a178aeadf813a978f9cdb8ff96d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::AVLTree_const_iterator</definition>
        <argsstring>()</argsstring>
        <name>AVLTree_const_iterator</name>
        <briefdescription>
<para>Initializes the member data with default values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="416" column="1" bodyfile="AVLTree.hpp" bodystart="416" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1aa9555f1f662455ec6af572f9350ade37" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::AVLTree_const_iterator</definition>
        <argsstring>(const AVLTree_iterator&lt; _Type, _node_pointer &gt; &amp;copy)</argsstring>
        <name>AVLTree_const_iterator</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref>&lt; _Type, _node_pointer &gt; &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Initializes the member data with values from the copy object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>- an AVL tree object to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="424" column="1" bodyfile="AVLTree.hpp" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1a32243cde4217f623dc9522b130874be7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::AVLTree_const_iterator</definition>
        <argsstring>(const AVLTree_const_iterator &amp;copy)</argsstring>
        <name>AVLTree_const_iterator</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Initializes the member data with values from the copy object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>- an AVL tree object to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="432" column="1" bodyfile="AVLTree.hpp" bodystart="432" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1a592ad3ce6efbfcafe4ecaf41b1f30f85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::~AVLTree_const_iterator</definition>
        <argsstring>()</argsstring>
        <name>~AVLTree_const_iterator</name>
        <briefdescription>
<para>Default destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="439" column="1" bodyfile="AVLTree.hpp" bodystart="439" bodyend="439"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1ad4cd511f243d194f804659bd6be65cbf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::operator=</definition>
        <argsstring>(const AVLTree_const_iterator &amp;copy)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>- an AVL tree object to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the new AVL tree object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="448" column="1" bodyfile="AVLTree.hpp" bodystart="448" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1afcbc171c8f59cfda44b0063f99177e56" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__const__iterator_1a60f81dd86cc602fcc95a298df957990b" kindref="member">reference</ref></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Dereference operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the value contained in the node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="467" column="1" bodyfile="AVLTree.hpp" bodystart="467" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1afcff074e299c45ae42196b5e4b4be8d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__const__iterator_1a0fbfdccc80380ae68a44281dcc18e770" kindref="member">pointer</ref></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Arrow operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to the node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="475" column="1" bodyfile="AVLTree.hpp" bodystart="475" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1ad881a06d60c2f8481d1b3f08ba32e3fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref> &amp;</type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Pre-increment operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>incremented iterator reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="483" column="1" bodyfile="AVLTree.hpp" bodystart="483" bodyend="523"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__const__iterator_1a4d43deacd7fe153f00031da0f5b9597e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__const__iterator" kindref="compound">AVLTree_const_iterator</ref></type>
        <definition>AVLTree_const_iterator&lt; _Type, _NodePtr &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-increment operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator value that points to the iterator pre-increment. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="531" column="1" bodyfile="AVLTree.hpp" bodystart="531" bodyend="539"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A constant iterator that iterates through the tree in-order. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_Type</parametername>
</parameternamelist>
<parameterdescription>
<para>- a type for the node pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_NodePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- a pointer to the nodes to be iterated through. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_a_v_l_tree" kindref="compound">AVLTree</ref>. </para></simplesect>
</para>    </detaileddescription>
    <location file="AVLTree.hpp" line="382" column="1" bodyfile="AVLTree.hpp" bodystart="382" bodyend="565"/>
    <listofallmembers>
      <member refid="class_a_v_l_tree__const__iterator_1ad8477a42408fd130992d2cfcb42dcb5d" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>_ptr</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1ad7a12b75802e659f5991bcf31cbf8acb" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>_ref</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1aa926bd8d1e26ee32ade14a311ebf8df5" prot="private" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>AVLTree</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a78ce8eb277b5289da1b8509813cbc2a0" prot="private" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>AVLTree_const_iterator</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1aebe2a178aeadf813a978f9cdb8ff96d3" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>AVLTree_const_iterator</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1aa9555f1f662455ec6af572f9350ade37" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>AVLTree_const_iterator</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a32243cde4217f623dc9522b130874be7" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>AVLTree_const_iterator</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a3b97d3835e767e85b1cededfeefa9d84" prot="private" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>AVLTree_iterator</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a4373b7d2f957d78030ee9dbd86fc307e" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>difference_type</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1aa2d12330a9ba748729e42d8fc882c98e" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>iterator_category</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1affd846c45384c4c538ae133d9723ffa4" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>operator!=</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1afcbc171c8f59cfda44b0063f99177e56" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>operator*</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1ad881a06d60c2f8481d1b3f08ba32e3fa" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>operator++</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a4d43deacd7fe153f00031da0f5b9597e" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>operator++</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1afcff074e299c45ae42196b5e4b4be8d0" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>operator-&gt;</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1ad4cd511f243d194f804659bd6be65cbf" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>operator=</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1aa8f8a38cc48dccdbf336f2e44dbf084c" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>operator==</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a0fbfdccc80380ae68a44281dcc18e770" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>pointer</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a60f81dd86cc602fcc95a298df957990b" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>reference</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1abff96c9a253b234068c5d34f7471751d" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>value_type</name></member>
      <member refid="class_a_v_l_tree__const__iterator_1a592ad3ce6efbfcafe4ecaf41b1f30f85" prot="public" virt="non-virtual"><scope>AVLTree_const_iterator</scope><name>~AVLTree_const_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
