<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="class_a_v_l_tree_index" kind="class" language="C++" prot="public">
    <compoundname>AVLTreeIndex</compoundname>
    <basecompoundref refid="class_index_interface" prot="public" virt="non-virtual">IndexInterface</basecompoundref>
    <includes refid="_a_v_l_tree_index_8hpp" local="no">AVLTreeIndex.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_a_v_l_tree_index_1a1844b03d25ec12d2992b20dda2824025" prot="private" static="no" mutable="no">
        <type><ref refid="class_a_v_l_tree" kindref="compound">AVLTree</ref>&lt; <ref refid="class_token" kindref="compound">Token</ref> &gt;</type>
        <definition>AVLTree&lt;Token&gt; AVLTreeIndex::tokens</definition>
        <argsstring></argsstring>
        <name>tokens</name>
        <briefdescription>
<para>An AVL tree to contain Tokens, representing the index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="24" column="1" bodyfile="AVLTreeIndex.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_a_v_l_tree_index_1aba8dc551ea4963a8082991f52bb19c25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AVLTreeIndex::AVLTreeIndex</definition>
        <argsstring>()</argsstring>
        <name>AVLTreeIndex</name>
        <briefdescription>
<para>Initializes the member data with default values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="33" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="8" bodyend="8"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1a33cfafc8516541f0d135c707955588f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>AVLTreeIndex::~AVLTreeIndex</definition>
        <argsstring>()</argsstring>
        <name>~AVLTreeIndex</name>
        <briefdescription>
<para>Destructor for proper memory management. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="40" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="10" bodyend="10"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1a1f84720f7580bd785a11d0e0425bd537" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>AVLTreeIndex::addDocument</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>addDocument</name>
        <reimplements refid="class_index_interface_1aa7601d76e8cc3f0657e800efdc4c127e">addDocument</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Function for adding a document. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>- a path to a file to add to the index. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="48" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="12" bodyend="19"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1a1a877f264d30b657f37c6ed070d2e250" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>AVLTreeIndex::clearIndex</definition>
        <argsstring>()</argsstring>
        <name>clearIndex</name>
        <reimplements refid="class_index_interface_1aac36b4561598ee84c0c68958a1e3f82b">clearIndex</reimplements>
        <briefdescription>
<para>Function for clearing the index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="55" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="21" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1a447e5741c289869d5a5188def065fb6c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AVLTreeIndex::emptyIndex</definition>
        <argsstring>() const </argsstring>
        <name>emptyIndex</name>
        <reimplements refid="class_index_interface_1aaf90058a62e096bf607ea3dec2545ee4">emptyIndex</reimplements>
        <briefdescription>
<para>Function for returning whether the index is empty. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>boolean whether the index is empty. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="63" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="31" bodyend="31"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1ab549fb6b9fdf08926540f6652859d442" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="class_token" kindref="compound">Token</ref></type>
        <definition>AVLTreeIndex::findWord</definition>
        <argsstring>(std::string &amp;term)</argsstring>
        <name>findWord</name>
        <reimplements refid="class_index_interface_1aa0ea18e7daa9984240d108bd765b2816">findWord</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>Function for finding a word in the index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>- term to search for in the index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_token" kindref="compound">Token</ref> (by value for <ref refid="class_hash_table_index" kindref="compound">HashTableIndex</ref> compatibility) representing the searched word. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="72" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="33" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1a0716178493a342dd6b790cfa8d01b3fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>const <ref refid="class_document" kindref="compound">Document</ref> &amp;</type>
        <definition>AVLTreeIndex::getDocumentByID</definition>
        <argsstring>(const int &amp;docID)</argsstring>
        <name>getDocumentByID</name>
        <reimplements refid="class_index_interface_1aa694a3e8feb722519b45f7313281bfad">getDocumentByID</reimplements>
        <param>
          <type>const int &amp;</type>
          <declname>docID</declname>
        </param>
        <briefdescription>
<para>Function for getting a document pertaining to a given ID number. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>docID</parametername>
</parameternamelist>
<parameterdescription>
<para>- a document ID number. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="class_document" kindref="compound">Document</ref> reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="81" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1acb31068c39161358ec6545df5feaabc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AVLTreeIndex::hasWord</definition>
        <argsstring>(std::string &amp;term)</argsstring>
        <name>hasWord</name>
        <reimplements refid="class_index_interface_1a8ccd80a03123406cb4b1e2494349f9da">hasWord</reimplements>
        <param>
          <type>std::string &amp;</type>
          <declname>term</declname>
        </param>
        <briefdescription>
<para>Function for returning whether the index contains a given word. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>term</parametername>
</parameternamelist>
<parameterdescription>
<para>- a term to search the index for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean whether the index contains the word. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="90" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="44" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1a603741ace3489018f33f5ba4282e3f0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>AVLTreeIndex::listIndex</definition>
        <argsstring>()</argsstring>
        <name>listIndex</name>
        <reimplements refid="class_index_interface_1ad8567919eafa87ac20c35928c929084d">listIndex</reimplements>
        <briefdescription>
<para>Function for writing the persistent index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="97" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="53" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1af161b8697db7e3f599abc78a36f8d145" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AVLTreeIndex::loadIndex</definition>
        <argsstring>()</argsstring>
        <name>loadIndex</name>
        <reimplements refid="class_index_interface_1a006f773f4e143745474e847cfb9f27fc">loadIndex</reimplements>
        <briefdescription>
<para>Function for loading an index in from persistent state. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>boolean whether the index was successfully loaded. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="105" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="87" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree_index_1a37200f167e48a7b24cb012b9ff5cf44c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>AVLTreeIndex::makeIndex</definition>
        <argsstring>(const std::string &amp;fileName)</argsstring>
        <name>makeIndex</name>
        <reimplements refid="class_index_interface_1a7b2ae510fa62eebb654708b90972c1b6">makeIndex</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>fileName</declname>
        </param>
        <briefdescription>
<para>Function for creating the index. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fileName</parametername>
</parameternamelist>
<parameterdescription>
<para>- a directory containing files to be put in the index. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean whether the index was successfully created. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTreeIndex.hpp" line="114" column="1" bodyfile="AVLTreeIndex.cpp" bodystart="145" bodyend="158"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Class for dealing with the index in AVL tree form. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="class_hash_table_index" kindref="compound">HashTableIndex</ref>. </para></simplesect>
<simplesect kind="see"><para><ref refid="class_index_interface" kindref="compound">IndexInterface</ref>. </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="6">
        <label>AVLTreeIndex</label>
        <link refid="class_a_v_l_tree_index"/>
        <childnode refid="7" relation="public-inheritance">
        </childnode>
      </node>
      <node id="7">
        <label>IndexInterface</label>
        <link refid="class_index_interface"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="8">
        <label>AVLTreeIndex</label>
        <link refid="class_a_v_l_tree_index"/>
        <childnode refid="9" relation="public-inheritance">
        </childnode>
      </node>
      <node id="9">
        <label>IndexInterface</label>
        <link refid="class_index_interface"/>
      </node>
    </collaborationgraph>
    <location file="AVLTreeIndex.hpp" line="20" column="1" bodyfile="AVLTreeIndex.hpp" bodystart="20" bodyend="116"/>
    <listofallmembers>
      <member refid="class_a_v_l_tree_index_1a1f84720f7580bd785a11d0e0425bd537" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>addDocument</name></member>
      <member refid="class_a_v_l_tree_index_1aba8dc551ea4963a8082991f52bb19c25" prot="public" virt="non-virtual"><scope>AVLTreeIndex</scope><name>AVLTreeIndex</name></member>
      <member refid="class_a_v_l_tree_index_1a1a877f264d30b657f37c6ed070d2e250" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>clearIndex</name></member>
      <member refid="class_a_v_l_tree_index_1a447e5741c289869d5a5188def065fb6c" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>emptyIndex</name></member>
      <member refid="class_a_v_l_tree_index_1ab549fb6b9fdf08926540f6652859d442" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>findWord</name></member>
      <member refid="class_a_v_l_tree_index_1a0716178493a342dd6b790cfa8d01b3fa" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>getDocumentByID</name></member>
      <member refid="class_index_interface_1af5d7e170720c26b3d38499d4e5e1dd69" prot="public" virt="non-virtual"><scope>AVLTreeIndex</scope><name>getNumDocs</name></member>
      <member refid="class_index_interface_1a3260a1213d90bd6cb6fd33043fb28b44" prot="public" virt="non-virtual"><scope>AVLTreeIndex</scope><name>getNumTokens</name></member>
      <member refid="class_a_v_l_tree_index_1acb31068c39161358ec6545df5feaabc0" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>hasWord</name></member>
      <member refid="class_index_interface_1a7b1e7eae7faa652d2f63efeecf0ca2de" prot="public" virt="non-virtual"><scope>AVLTreeIndex</scope><name>IndexInterface</name></member>
      <member refid="class_a_v_l_tree_index_1a603741ace3489018f33f5ba4282e3f0d" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>listIndex</name></member>
      <member refid="class_a_v_l_tree_index_1af161b8697db7e3f599abc78a36f8d145" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>loadIndex</name></member>
      <member refid="class_a_v_l_tree_index_1a37200f167e48a7b24cb012b9ff5cf44c" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>makeIndex</name></member>
      <member refid="class_a_v_l_tree_index_1a1844b03d25ec12d2992b20dda2824025" prot="private" virt="non-virtual"><scope>AVLTreeIndex</scope><name>tokens</name></member>
      <member refid="class_a_v_l_tree_index_1a33cfafc8516541f0d135c707955588f7" prot="public" virt="non-virtual"><scope>AVLTreeIndex</scope><name>~AVLTreeIndex</name></member>
      <member refid="class_index_interface_1a3927fabe77a7da5845dc0495b2c1c2b2" prot="public" virt="virtual"><scope>AVLTreeIndex</scope><name>~IndexInterface</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
