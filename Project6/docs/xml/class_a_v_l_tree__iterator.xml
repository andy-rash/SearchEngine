<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.10">
  <compounddef id="class_a_v_l_tree__iterator" kind="class" language="C++" prot="public">
    <compoundname>AVLTree_iterator</compoundname>
    <includes refid="_a_v_l_tree_8hpp" local="no">AVLTree.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>_Type</declname>
        <defname>_Type</defname>
      </param>
      <param>
        <type>class</type>
        <declname>_NodePtr</declname>
        <defname>_NodePtr</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="class_a_v_l_tree__iterator_1aeb3e2ca18b485bfb0328a6a66e798f7e" prot="public" static="no">
        <type>std::forward_iterator_tag</type>
        <definition>typedef std::forward_iterator_tag AVLTree_iterator&lt; _Type, _NodePtr &gt;::iterator_category</definition>
        <argsstring></argsstring>
        <name>iterator_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="218" column="1" bodyfile="AVLTree.hpp" bodystart="218" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__iterator_1adad51d3a8cc80149c12d9eb311f979fc" prot="public" static="no">
        <type>std::pointer_traits&lt; _node_pointer &gt;::element_type::value_type</type>
        <definition>typedef std::pointer_traits&lt;_node_pointer&gt;::element_type::value_type AVLTree_iterator&lt; _Type, _NodePtr &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="219" column="1" bodyfile="AVLTree.hpp" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__iterator_1a67cbb11da40a9e4a517bb9a082590d5a" prot="public" static="no">
        <type><ref refid="class_a_v_l_tree__iterator_1adad51d3a8cc80149c12d9eb311f979fc" kindref="member">value_type</ref> &amp;</type>
        <definition>typedef value_type&amp; AVLTree_iterator&lt; _Type, _NodePtr &gt;::reference</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="220" column="1" bodyfile="AVLTree.hpp" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__iterator_1ab3060d2f8d96febec03250b59b9d6c5b" prot="public" static="no">
        <type><ref refid="class_a_v_l_tree__iterator_1adad51d3a8cc80149c12d9eb311f979fc" kindref="member">value_type</ref> *</type>
        <definition>typedef value_type* AVLTree_iterator&lt; _Type, _NodePtr &gt;::pointer</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="221" column="1" bodyfile="AVLTree.hpp" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="class_a_v_l_tree__iterator_1ac6fc6dee98fa0759f9ae3081ae6e4038" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>typedef std::ptrdiff_t AVLTree_iterator&lt; _Type, _NodePtr &gt;::difference_type</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="222" column="1" bodyfile="AVLTree.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="class_a_v_l_tree__iterator_1a6751a589fccabfbacf9368d97785b940" prot="private" static="no" mutable="no">
        <type>_node_pointer</type>
        <definition>_node_pointer AVLTree_iterator&lt; _Type, _NodePtr &gt;::_ptr</definition>
        <argsstring></argsstring>
        <name>_ptr</name>
        <briefdescription>
<para>A pointer to the nodes in the AVL tree. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="200" column="1" bodyfile="AVLTree.hpp" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_a_v_l_tree__iterator_1a99947695b51a109ee29b34aeece1330b" prot="private" static="no" mutable="no">
        <type>_AVLTree</type>
        <definition>_AVLTree AVLTree_iterator&lt; _Type, _NodePtr &gt;::_ref</definition>
        <argsstring></argsstring>
        <name>_ref</name>
        <briefdescription>
<para>A reference AVL tree pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="201" column="1" bodyfile="AVLTree.hpp" bodystart="201" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="class_a_v_l_tree__iterator_1aa926bd8d1e26ee32ade14a311ebf8df5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class AVLTree</definition>
        <argsstring></argsstring>
        <name>AVLTree</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="213" column="1" bodyfile="AVLTree.hpp" bodystart="213" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_a_v_l_tree__iterator_1afe091ef781f649e6f53c487b80a067f1" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class</type>
          </param>
          <param>
            <type>class</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class AVLTree_const_iterator</definition>
        <argsstring></argsstring>
        <name>AVLTree_const_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="214" column="1" bodyfile="AVLTree.hpp" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="class_a_v_l_tree__iterator_1a45d6200909fd4d5e6f7e7084ef428d34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::operator==</definition>
        <argsstring>(const AVLTree_iterator &amp;lhs, const AVLTree_iterator &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Equality operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- first operand to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- second operand to be compared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean value whether the iterators are equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="355" column="1" bodyfile="AVLTree.hpp" bodystart="355" bodyend="356"/>
      </memberdef>
      <memberdef kind="friend" id="class_a_v_l_tree__iterator_1a32ea0c466c92a1554c309cd332712c66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool AVLTree_iterator&lt; _Type, _NodePtr &gt;::operator!=</definition>
        <argsstring>(const AVLTree_iterator &amp;lhs, const AVLTree_iterator &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Inequality operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- first operand to be compared. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>- second operand to be compared. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>boolean value whether the iterators are not equal. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="367" column="1" bodyfile="AVLTree.hpp" bodystart="367" bodyend="368"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1af7088173a96c0a691d6c2e21575205f8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::AVLTree_iterator</definition>
        <argsstring>(_node_pointer ptr, _AVLTree tree)</argsstring>
        <name>AVLTree_iterator</name>
        <param>
          <type>_node_pointer</type>
          <declname>ptr</declname>
        </param>
        <param>
          <type>_AVLTree</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
<para>Initializes the member data with given values. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>- node pointer for the iterator to be initialized with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tree</parametername>
</parameternamelist>
<parameterdescription>
<para>- a tree for the node to point to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="210" column="1" bodyfile="AVLTree.hpp" bodystart="210" bodyend="211"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1af2b909a226f39060ee9b27159329891c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::AVLTree_iterator</definition>
        <argsstring>()</argsstring>
        <name>AVLTree_iterator</name>
        <briefdescription>
<para>Initializes the member data with default values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="229" column="1" bodyfile="AVLTree.hpp" bodystart="229" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1a0e2b50ac09524402305b57cf6d70a403" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::AVLTree_iterator</definition>
        <argsstring>(const AVLTree_iterator &amp;copy)</argsstring>
        <name>AVLTree_iterator</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Initializes the member data with values from the copy object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>- an AVL tree object to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="237" column="1" bodyfile="AVLTree.hpp" bodystart="237" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1a126eb53123eb440dd96fe2738b82cbc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::~AVLTree_iterator</definition>
        <argsstring>()</argsstring>
        <name>~AVLTree_iterator</name>
        <briefdescription>
<para>Default destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="244" column="1" bodyfile="AVLTree.hpp" bodystart="244" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1a0ed09a6668db4965df05ce76d1afd58b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::operator=</definition>
        <argsstring>(const AVLTree_iterator &amp;copy)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
          <declname>copy</declname>
        </param>
        <briefdescription>
<para>Assignment operator. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>copy</parametername>
</parameternamelist>
<parameterdescription>
<para>- an AVL tree object to be copied. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>reference to the new AVL tree object. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="253" column="1" bodyfile="AVLTree.hpp" bodystart="253" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1a9aee606e4ff5c9500190256e78793200" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__iterator_1a67cbb11da40a9e4a517bb9a082590d5a" kindref="member">reference</ref></type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::operator*</definition>
        <argsstring>() const </argsstring>
        <name>operator*</name>
        <briefdescription>
<para>Dereference operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>reference to the value contained in the node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="272" column="1" bodyfile="AVLTree.hpp" bodystart="272" bodyend="272"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1a7a15816e2b2a6e4bf6242477391f5cc5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__iterator_1ab3060d2f8d96febec03250b59b9d6c5b" kindref="member">pointer</ref></type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::operator-&gt;</definition>
        <argsstring>() const </argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
<para>Arrow operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>pointer to the node. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="280" column="1" bodyfile="AVLTree.hpp" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1a66da49835f9ef7d848c03ca4891d2e38" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref> &amp;</type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Pre-increment operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>incremented iterator reference. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="288" column="1" bodyfile="AVLTree.hpp" bodystart="288" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_a_v_l_tree__iterator_1a2b089f2be379782a8a7fb3021207e28b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="class_a_v_l_tree__iterator" kindref="compound">AVLTree_iterator</ref></type>
        <definition>AVLTree_iterator&lt; _Type, _NodePtr &gt;::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Post-increment operator. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>an iterator value that points to the iterator pre-increment. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="AVLTree.hpp" line="336" column="1" bodyfile="AVLTree.hpp" bodystart="336" bodyend="344"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A non-const iterator that iterates through the tree in-order. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>_Type</parametername>
</parameternamelist>
<parameterdescription>
<para>- a type for the node pointer. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>_NodePtr</parametername>
</parameternamelist>
<parameterdescription>
<para>- a pointer to the nodes to be iterated through. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="class_a_v_l_tree" kindref="compound">AVLTree</ref>. </para></simplesect>
</para>    </detaileddescription>
    <location file="AVLTree.hpp" line="195" column="1" bodyfile="AVLTree.hpp" bodystart="195" bodyend="370"/>
    <listofallmembers>
      <member refid="class_a_v_l_tree__iterator_1a6751a589fccabfbacf9368d97785b940" prot="private" virt="non-virtual"><scope>AVLTree_iterator</scope><name>_ptr</name></member>
      <member refid="class_a_v_l_tree__iterator_1a99947695b51a109ee29b34aeece1330b" prot="private" virt="non-virtual"><scope>AVLTree_iterator</scope><name>_ref</name></member>
      <member refid="class_a_v_l_tree__iterator_1aa926bd8d1e26ee32ade14a311ebf8df5" prot="private" virt="non-virtual"><scope>AVLTree_iterator</scope><name>AVLTree</name></member>
      <member refid="class_a_v_l_tree__iterator_1afe091ef781f649e6f53c487b80a067f1" prot="private" virt="non-virtual"><scope>AVLTree_iterator</scope><name>AVLTree_const_iterator</name></member>
      <member refid="class_a_v_l_tree__iterator_1af7088173a96c0a691d6c2e21575205f8" prot="private" virt="non-virtual"><scope>AVLTree_iterator</scope><name>AVLTree_iterator</name></member>
      <member refid="class_a_v_l_tree__iterator_1af2b909a226f39060ee9b27159329891c" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>AVLTree_iterator</name></member>
      <member refid="class_a_v_l_tree__iterator_1a0e2b50ac09524402305b57cf6d70a403" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>AVLTree_iterator</name></member>
      <member refid="class_a_v_l_tree__iterator_1ac6fc6dee98fa0759f9ae3081ae6e4038" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>difference_type</name></member>
      <member refid="class_a_v_l_tree__iterator_1aeb3e2ca18b485bfb0328a6a66e798f7e" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>iterator_category</name></member>
      <member refid="class_a_v_l_tree__iterator_1a32ea0c466c92a1554c309cd332712c66" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>operator!=</name></member>
      <member refid="class_a_v_l_tree__iterator_1a9aee606e4ff5c9500190256e78793200" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>operator*</name></member>
      <member refid="class_a_v_l_tree__iterator_1a66da49835f9ef7d848c03ca4891d2e38" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>operator++</name></member>
      <member refid="class_a_v_l_tree__iterator_1a2b089f2be379782a8a7fb3021207e28b" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>operator++</name></member>
      <member refid="class_a_v_l_tree__iterator_1a7a15816e2b2a6e4bf6242477391f5cc5" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>operator-&gt;</name></member>
      <member refid="class_a_v_l_tree__iterator_1a0ed09a6668db4965df05ce76d1afd58b" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>operator=</name></member>
      <member refid="class_a_v_l_tree__iterator_1a45d6200909fd4d5e6f7e7084ef428d34" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>operator==</name></member>
      <member refid="class_a_v_l_tree__iterator_1ab3060d2f8d96febec03250b59b9d6c5b" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>pointer</name></member>
      <member refid="class_a_v_l_tree__iterator_1a67cbb11da40a9e4a517bb9a082590d5a" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>reference</name></member>
      <member refid="class_a_v_l_tree__iterator_1adad51d3a8cc80149c12d9eb311f979fc" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>value_type</name></member>
      <member refid="class_a_v_l_tree__iterator_1a126eb53123eb440dd96fe2738b82cbc3" prot="public" virt="non-virtual"><scope>AVLTree_iterator</scope><name>~AVLTree_iterator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
